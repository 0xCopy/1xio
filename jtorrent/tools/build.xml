
<project name="JTorrent" default="compile" basedir="..">

<!-- ==================== File and Directory Names ======================== -->

	<property name="app.name"      value="JTorrent" />
	<property name="app.version"   value="0.1" />

	<property name="src.dir"       value="${basedir}/" />

	<property name="classes.dir"   value="${basedir}/classes" />
	<property name="docs.dir"      value="${basedir}/docs" />
	<property name="tools.dir"     value="${basedir}/tools" />
	<property name="examples.dir"  value="${basedir}/examples" />

	<property name="build.dir"     value="${basedir}/build" />
	<property name="installer.dir" value="${build.dir}/installer" />
	<property name="war.dir"       value="${build.dir}/war" />

<!-- 
     READ THIS COMMENT, it explains how parameters are passed by the installer
     to this build script
     the installdir property passed by the installer to ANT for installation 
     it is where the application is installed 
     the jvmdir property is where the Java JVM we are using is installed 
     the installjar property is the pass to the installer.jar file which
     contains the application -->

<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>

<!-- ==================== All Target ====================================== -->

	<target name="all" depends="clean,compile,javadoc,war,makeinstaller"
   description="Clean build and dist directories, then compile"/>

<!-- ==================== Clean Target ==================================== -->

	<target name="clean" description="Delete old directories">
		<delete dir="${build.dir}" />
		<delete dir="${classes.dir}" />
		<delete dir="${docs.dir}" />
		<echo message="Finished Cleaning..." />
	</target>

<!-- ==================== compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

	<target name="compile" description="Compile Java sources">
		<mkdir dir="${classes.dir}"/>
		<javac srcdir="${src.dir}/org/jtorrent/" destdir="${classes.dir}" >
<!--        <classpath refid="compile.classpath"/> -->
	</javac>
	<echo message="Finished Compiling..." />
	</target>

<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

	<target name="javadoc" description="Create Javadoc API documentation">
		<mkdir dir="${docs.dir}" />
		<javadoc sourcepath="${src.dir}" destdir="${docs.dir}"
			packagenames="org/jtorrent/*"
			link="http://java.sun.com/j2se/1.4.1/docs/api"/>
	</target>

<!-- ==================== war Target ===================================== -->

<!--

  The "war" target creates a WAR file suitable for deployment in any standard
  servlet engine, It was developed on tomcat4 so I suggest that engine.
-->

	<target name="war" depends="compile" description="Create Servlet WAR">
		<mkdir dir="${war.dir}" />
		<mkdir dir="${war.dir}/WEB-INF/" />
		<mkdir dir="${war.dir}/WEB-INF/lib/" />
		<mkdir dir="${war.dir}/WEB-INF/classes/" />
		<mkdir dir="${war.dir}/WEB-INF/classes/org/" />
		<mkdir dir="${war.dir}/WEB-INF/classes/org/jtorrent/" />
		<copy  todir="${war.dir}/WEB-INF" file="${tools.dir}/web.xml" />
		<copy  todir="${war.dir}/WEB-INF/classes/org/jtorrent">
			<fileset dir="${classes.dir}/org/jtorrent" />
		</copy>
		<jar jarfile="${build.dir}/tracker-${app.version}.war" basedir="${war.dir}" />
	<echo message="Built ${build.dir}/tracker-${app.version}.war" />
	</target>

<!-- makes the installer.jar file -->
	<target name="makeinstaller" depends="clean,compile" description="Makes the Installer.jar file which installs JTorrent">
		<mkdir dir="${installer.dir}" />
		<copy todir="${installer.dir}">
			<fileset dir="${classes.dir}"/>
			<fileset dir="${examples.dir}"/>
		</copy>
		<copy todir="${installer.dir}">
			<fileset dir="${tools.dir}">
				<include name="installer.xml"/>
				<include name="config.cfg" />
				<include name="install.props" />
				<include name="ICE_JNIRegistry.dll" />
			</fileset>
		</copy>
		<copy todir="${installer.dir}" file="README.client" />
		<move file="${installer.dir}/installer.xml" tofile="${installer.dir}/build.xml"/>
		<unjar src="${tools.dir}/tools.jar" dest="${installer.dir}"/>
		<jar destfile="${build.dir}/installer-${app.version}.jar" basedir="${installer.dir}"
			manifest="${tools.dir}/MANIFEST.MF" />
		<echo message="Built ${build.dir}/installer-${app.version}.jar" />
	</target>

</project>
